import unittest

def add_integer(a, b=98):
    """
    Adds two integers.

    Args:
        a (int or float): First number.
        b (int or float, optional): Second number (default is 98).

    Returns:
        int: Sum of a and b (casted to integer).
        
    Raises:
        TypeError: If a or b is not an integer or float.
    """
    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
        raise TypeError("a must be an integer or b must be an integer")
    
    # Cast a and b to integers if they are floats
    a = int(a)
    b = int(b)
    
    return a + b

class TestAddInteger(unittest.TestCase):
    def test_add_positive_numbers(self):
        self.assertEqual(add_integer(5, 3), 8)
    
    def test_add_negative_numbers(self):
        self.assertEqual(add_integer(-10, -7), -17)
    
    def test_add_floats(self):
        self.assertEqual(add_integer(2.5, 1.5), 4)
    
    def test_default_value(self):
        self.assertEqual(add_integer(10), 108)  # 10 + 98 = 108
    
    def test_invalid_input(self):
        with self.assertRaises(TypeError):
            add_integer("hello", 5)
            add_integer(10, "world")

if __name__ == "__main__":
    unittest.main()

